################################################################################
# training parameters
################################################################################
train:
  loss: "xentropy"       # must be either xentropy or iou
  max_epochs: 100
  lr: 0.01              # sgd learning rate
  wup_epochs: 1          # warmup during first XX epochs (can be float)
  momentum: 0.9          # sgd momentum
  lr_decay: 0.995        # learning rate decay per epoch after initial cycle (from min lr)
  w_decay: 0.0001        # weight decay
  batch_size: 1          # batch size
  report_batch: 1        # every x batches, report loss
  report_epoch: 1        # every x epochs, report validation set
  epsilon_w: 0.001       # class weight w = 1 / (content + epsilon_w)
  save_summary: False    # Summary of weight histograms for tensorboard
  save_scans: True       # False doesn't save anything, True saves some 
                         # sample images (one per batch of the last calculated batch)
                         # in log folder
  show_scans: False      # show scans during training
  workers: 12            # number of threads to get data

################################################################################
# backbone parameters
################################################################################
backbone:
  name: "squeezesegV2"  # ['squeezeseg', 'squeezesegV2', 'darknet']
  input_depth:
    range: True
    xyz: False  # copying upenn https://github.com/PRBonn/lidar-bonnetal/compare/master...XuRobotics:lidar-bonnetal:master#diff-6f612f2954767b070d02e294d5ad54cd2113b8482b8db3b4357977f63321a88f
    remission: False # " " 
  dropout: 0.01
  OS: 8 # output stride (only horizontally)
  bn_d: 0.01
  train: True # train backbone?
  extra: False

################################################################################
# decoder parameters
################################################################################
decoder:
  name: "squeezesegV2"
  dropout: 0.01
  bn_d: 0.01
  train: True # train decoder?
  extra: False # nothing to add for this decoder, otherwise this is a dict

################################################################################
# classification head parameters
################################################################################
head:
  name: "segmentation"
  train: True
  dropout: 0.01

################################################################################
# postproc parameters
################################################################################
post:
  CRF: 
    use: False
    train: True
    params: True
    params:
      iter: 3
      lcn_size:
        h: 3
        w: 5
      xyz_coef: 0.1
      xyz_sigma: 0.7
  KNN:
    use: True
    params:
      knn: 5
      search: 5
      sigma: 1.0 
      cutoff: 1.0

################################################################################
# classification head parameters
################################################################################
# dataset (to find parser)
dataset:
  labels: "digikittiforest"
  scans: "digikittiforest"
  max_points: 64000 # max of any scan in dataset
  sensor:
    name: "HDL64"
    type: "spherical" # projective
    fov_up: 15
    fov_down: -16 
    img_prop:
      width: 2000
      height: 32
    img_means: #range,x,y,z,signal
      - 12.12
      # - 10.88
      # - 0.23
      # - -1.04
      # - 0.21
    img_stds: #range,x,y,z,signal
      - 12.32
      # - 11.47
      # - 6.91
      # - 0.86
      # - 0.16
